syntax = "proto3";
package bitsong.fantoken;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/bitsongofficial/go-bitsong/x/fantoken/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the oracle Msg service
service Msg {
  // IssueFanToken defines a method for issuing a new fan token
  rpc IssueFanToken(MsgIssueFanToken) returns (MsgIssueFanTokenResponse);

  // EditFanToken defines a method for editing a fantoken
  rpc EditFanToken(MsgEditFanToken) returns (MsgEditFanTokenResponse);

  // MintFanToken defines a method for minting some fan tokens
  rpc MintFanToken(MsgMintFanToken) returns (MsgMintFanTokenResponse);

  // BurnFanToken defines a method for burning some fan tokens
  rpc BurnFanToken(MsgBurnFanToken) returns (MsgBurnFanTokenResponse);

  // TransferFanTokenOwner defines a method for minting some fan tokens
  rpc TransferFanTokenOwner(MsgTransferFanTokenOwner)
      returns (MsgTransferFanTokenOwnerResponse);
}

// MsgIssueFanToken defines an SDK message for issuing a new fan token
message MsgIssueFanToken {
  string symbol = 1;
  string name = 2;
  string max_supply = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.moretags) = "yaml:\"max_supply\"",
    (gogoproto.nullable) = false
  ];
  string description = 4;
  string owner = 5;
  string uri = 6 [(gogoproto.customname) = "URI"];
  cosmos.base.v1beta1.Coin issue_fee = 7 [
    (gogoproto.moretags) = "yaml:\"issue_fee\"",
    (gogoproto.nullable) = false
  ];
}

// MsgIssueFanTokenResponse defines the Msg/IssueFanToken response type
message MsgIssueFanTokenResponse {}

// MsgTransferFanTokenOwner defines an SDK message for transferring the token
// owner
message MsgTransferFanTokenOwner {
  string denom = 1;
  string src_owner = 2 [ (gogoproto.moretags) = "yaml:\"src_owner\"" ];
  string dst_owner = 3 [ (gogoproto.moretags) = "yaml:\"dst_owner\"" ];
}

// MsgTransferFanTokenOwnerResponse defines the Msg/TransferFanTokenOwner
// response type
message MsgTransferFanTokenOwnerResponse {}

// MsgEditFanToken defines an SDK message for editing a fan token
message MsgEditFanToken {
  string denom = 1;
  bool mintable = 2;
  string owner = 3;
}

// MsgEditFanTokenResponse defines the Msg/EditFanToken response type
message MsgEditFanTokenResponse {}

// MsgMintFanToken defines an SDK message for minting a new fan token
message MsgMintFanToken {
  string recipient = 1;
  string denom = 2;
  string amount = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.moretags) = "yaml:\"amount\"",
    (gogoproto.nullable) = false
  ];
  string owner = 4;
}

// MsgMintFanTokenResponse defines the Msg/MintFanToken response type
message MsgMintFanTokenResponse {}

// MsgBurnFanToken defines an SDK message for burning some fan tokens
message MsgBurnFanToken {
  string denom = 1;
  string amount = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.moretags) = "yaml:\"amount\"",
    (gogoproto.nullable) = false
  ];
  string sender = 3;
}

// MsgBurnFanTokenResponse defines the Msg/BurnFanToken response type
message MsgBurnFanTokenResponse {}