// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bitsong/cadance/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterCadanceContract is the Msg/RegisterCadanceContract request type.
type MsgRegisterCadanceContract struct {
	// The address of the sender.
	SenderAddress string `protobuf:"bytes,1,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	// The address of the contract to register.
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *MsgRegisterCadanceContract) Reset()         { *m = MsgRegisterCadanceContract{} }
func (m *MsgRegisterCadanceContract) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterCadanceContract) ProtoMessage()    {}
func (*MsgRegisterCadanceContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5bbd129cd018eed, []int{0}
}
func (m *MsgRegisterCadanceContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterCadanceContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterCadanceContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterCadanceContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterCadanceContract.Merge(m, src)
}
func (m *MsgRegisterCadanceContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterCadanceContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterCadanceContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterCadanceContract proto.InternalMessageInfo

func (m *MsgRegisterCadanceContract) GetSenderAddress() string {
	if m != nil {
		return m.SenderAddress
	}
	return ""
}

func (m *MsgRegisterCadanceContract) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

// MsgRegisterCadanceContractResponse defines the response structure for executing a
// MsgRegisterCadanceContract message.
type MsgRegisterCadanceContractResponse struct {
}

func (m *MsgRegisterCadanceContractResponse) Reset()         { *m = MsgRegisterCadanceContractResponse{} }
func (m *MsgRegisterCadanceContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterCadanceContractResponse) ProtoMessage()    {}
func (*MsgRegisterCadanceContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5bbd129cd018eed, []int{1}
}
func (m *MsgRegisterCadanceContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterCadanceContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterCadanceContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterCadanceContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterCadanceContractResponse.Merge(m, src)
}
func (m *MsgRegisterCadanceContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterCadanceContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterCadanceContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterCadanceContractResponse proto.InternalMessageInfo

// MsgUnregisterCadanceContract is the Msg/UnregisterCadanceContract request type.
type MsgUnregisterCadanceContract struct {
	// The address of the sender.
	SenderAddress string `protobuf:"bytes,1,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	// The address of the contract to unregister.
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *MsgUnregisterCadanceContract) Reset()         { *m = MsgUnregisterCadanceContract{} }
func (m *MsgUnregisterCadanceContract) String() string { return proto.CompactTextString(m) }
func (*MsgUnregisterCadanceContract) ProtoMessage()    {}
func (*MsgUnregisterCadanceContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5bbd129cd018eed, []int{2}
}
func (m *MsgUnregisterCadanceContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnregisterCadanceContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnregisterCadanceContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnregisterCadanceContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnregisterCadanceContract.Merge(m, src)
}
func (m *MsgUnregisterCadanceContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnregisterCadanceContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnregisterCadanceContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnregisterCadanceContract proto.InternalMessageInfo

func (m *MsgUnregisterCadanceContract) GetSenderAddress() string {
	if m != nil {
		return m.SenderAddress
	}
	return ""
}

func (m *MsgUnregisterCadanceContract) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

// MsgUnregisterCadanceContractResponse defines the response structure for executing a
// MsgUnregisterCadanceContract message.
type MsgUnregisterCadanceContractResponse struct {
}

func (m *MsgUnregisterCadanceContractResponse) Reset()         { *m = MsgUnregisterCadanceContractResponse{} }
func (m *MsgUnregisterCadanceContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnregisterCadanceContractResponse) ProtoMessage()    {}
func (*MsgUnregisterCadanceContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5bbd129cd018eed, []int{3}
}
func (m *MsgUnregisterCadanceContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnregisterCadanceContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnregisterCadanceContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnregisterCadanceContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnregisterCadanceContractResponse.Merge(m, src)
}
func (m *MsgUnregisterCadanceContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnregisterCadanceContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnregisterCadanceContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnregisterCadanceContractResponse proto.InternalMessageInfo

// MsgUnjailCadanceContract is the Msg/UnjailCadanceContract request type.
type MsgUnjailCadanceContract struct {
	// The address of the sender.
	SenderAddress string `protobuf:"bytes,1,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	// The address of the contract to unjail.
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *MsgUnjailCadanceContract) Reset()         { *m = MsgUnjailCadanceContract{} }
func (m *MsgUnjailCadanceContract) String() string { return proto.CompactTextString(m) }
func (*MsgUnjailCadanceContract) ProtoMessage()    {}
func (*MsgUnjailCadanceContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5bbd129cd018eed, []int{4}
}
func (m *MsgUnjailCadanceContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnjailCadanceContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnjailCadanceContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnjailCadanceContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnjailCadanceContract.Merge(m, src)
}
func (m *MsgUnjailCadanceContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnjailCadanceContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnjailCadanceContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnjailCadanceContract proto.InternalMessageInfo

func (m *MsgUnjailCadanceContract) GetSenderAddress() string {
	if m != nil {
		return m.SenderAddress
	}
	return ""
}

func (m *MsgUnjailCadanceContract) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

// MsgUnjailCadanceContractResponse defines the response structure for executing a
// MsgUnjailCadanceContract message.
type MsgUnjailCadanceContractResponse struct {
}

func (m *MsgUnjailCadanceContractResponse) Reset()         { *m = MsgUnjailCadanceContractResponse{} }
func (m *MsgUnjailCadanceContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnjailCadanceContractResponse) ProtoMessage()    {}
func (*MsgUnjailCadanceContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5bbd129cd018eed, []int{5}
}
func (m *MsgUnjailCadanceContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnjailCadanceContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnjailCadanceContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnjailCadanceContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnjailCadanceContractResponse.Merge(m, src)
}
func (m *MsgUnjailCadanceContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnjailCadanceContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnjailCadanceContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnjailCadanceContractResponse proto.InternalMessageInfo

// MsgUpdateParams is the Msg/UpdateParams request type.
//
// Since: cosmos-sdk 0.47
type MsgUpdateParams struct {
	// authority is the address of the governance account.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the x/cadance parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5bbd129cd018eed, []int{6}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
//
// Since: cosmos-sdk 0.47
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5bbd129cd018eed, []int{7}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterCadanceContract)(nil), "bitsong.cadance.v1.MsgRegisterCadanceContract")
	proto.RegisterType((*MsgRegisterCadanceContractResponse)(nil), "bitsong.cadance.v1.MsgRegisterCadanceContractResponse")
	proto.RegisterType((*MsgUnregisterCadanceContract)(nil), "bitsong.cadance.v1.MsgUnregisterCadanceContract")
	proto.RegisterType((*MsgUnregisterCadanceContractResponse)(nil), "bitsong.cadance.v1.MsgUnregisterCadanceContractResponse")
	proto.RegisterType((*MsgUnjailCadanceContract)(nil), "bitsong.cadance.v1.MsgUnjailCadanceContract")
	proto.RegisterType((*MsgUnjailCadanceContractResponse)(nil), "bitsong.cadance.v1.MsgUnjailCadanceContractResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "bitsong.cadance.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "bitsong.cadance.v1.MsgUpdateParamsResponse")
}

func init() { proto.RegisterFile("bitsong/cadance/v1/tx.proto", fileDescriptor_e5bbd129cd018eed) }

var fileDescriptor_e5bbd129cd018eed = []byte{
	// 552 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x9b, 0x31, 0x4d, 0x9a, 0x81, 0x0d, 0xac, 0xa1, 0xb6, 0x61, 0xa4, 0x5d, 0xb6, 0x01,
	0x03, 0x16, 0xb3, 0x01, 0xd3, 0xc4, 0x8d, 0xee, 0x5c, 0x81, 0x8a, 0xb8, 0x70, 0x19, 0x6e, 0xe2,
	0x79, 0x46, 0x8d, 0x1d, 0xc5, 0xee, 0xb4, 0x5d, 0xf7, 0x09, 0x90, 0xf6, 0x0d, 0x38, 0x72, 0x42,
	0x88, 0x0f, 0xb1, 0xe3, 0x04, 0x17, 0x4e, 0x08, 0xb5, 0x48, 0xdc, 0xf8, 0x0c, 0xa8, 0xb1, 0x93,
	0xf1, 0x27, 0x46, 0xf4, 0xc0, 0x2e, 0x91, 0xf3, 0xbe, 0xcf, 0xfb, 0x3e, 0x3f, 0x45, 0x4f, 0x0c,
	0xae, 0x76, 0x99, 0x92, 0x82, 0x53, 0x14, 0xe2, 0x08, 0xf3, 0x90, 0xa0, 0xbd, 0x35, 0xa4, 0xf6,
	0x83, 0x24, 0x15, 0x4a, 0x40, 0x68, 0x9a, 0x81, 0x69, 0x06, 0x7b, 0x6b, 0xee, 0x3c, 0x15, 0x82,
	0xf6, 0x08, 0xc2, 0x09, 0x43, 0x98, 0x73, 0xa1, 0xb0, 0x62, 0x82, 0x4b, 0x3d, 0xe1, 0x56, 0x43,
	0x21, 0x63, 0x21, 0x51, 0x2c, 0xe9, 0x68, 0x53, 0x2c, 0xa9, 0x69, 0x34, 0x4b, 0x7c, 0x28, 0xe1,
	0x44, 0xb2, 0x7c, 0x74, 0x8e, 0x0a, 0x2a, 0xb2, 0x23, 0x1a, 0x9d, 0x4c, 0xb5, 0xae, 0x17, 0x6e,
	0xeb, 0x86, 0x7e, 0x31, 0xad, 0xcb, 0x38, 0x66, 0x5c, 0xa0, 0xec, 0xa9, 0x4b, 0x3e, 0x07, 0x6e,
	0x5b, 0xd2, 0x0e, 0xa1, 0x4c, 0x2a, 0x92, 0x6e, 0x69, 0xab, 0x2d, 0xc1, 0x55, 0x8a, 0x43, 0x05,
	0x97, 0xc1, 0x8c, 0x24, 0x3c, 0x22, 0xe9, 0x36, 0x8e, 0xa2, 0x94, 0x48, 0x59, 0x73, 0x9a, 0xce,
	0xcd, 0xe9, 0xce, 0x45, 0x5d, 0x7d, 0xa4, 0x8b, 0x70, 0x05, 0x5c, 0x0a, 0xcd, 0x48, 0x21, 0x9c,
	0xc8, 0x84, 0xb3, 0x79, 0xdd, 0x48, 0xfd, 0x25, 0xe0, 0xdb, 0xfd, 0x3a, 0x44, 0x26, 0x82, 0x4b,
	0xe2, 0x27, 0x60, 0xbe, 0x2d, 0xe9, 0x33, 0x9e, 0x9e, 0x19, 0xd7, 0x75, 0xb0, 0xf4, 0x37, 0xc7,
	0x82, 0xac, 0x07, 0x6a, 0x99, 0xee, 0x25, 0x66, 0xbd, 0xff, 0x4f, 0xe5, 0x83, 0xa6, 0xcd, 0xad,
	0x20, 0x3a, 0x72, 0xc0, 0xec, 0x48, 0x94, 0x44, 0x58, 0x91, 0x27, 0x38, 0xc5, 0xb1, 0x84, 0x1b,
	0x60, 0x1a, 0xf7, 0xd5, 0xae, 0x48, 0x99, 0x3a, 0xd0, 0x10, 0xad, 0xda, 0x87, 0xf7, 0xab, 0x73,
	0x26, 0x0d, 0x66, 0xfd, 0x53, 0x95, 0x32, 0x4e, 0x3b, 0xa7, 0x52, 0xb8, 0x09, 0xa6, 0x92, 0x6c,
	0x43, 0x06, 0x74, 0x7e, 0xdd, 0x0d, 0xfe, 0xcc, 0x73, 0xa0, 0x3d, 0x5a, 0x93, 0xc7, 0x9f, 0x1b,
	0x95, 0x8e, 0xd1, 0x3f, 0x9c, 0x39, 0xfc, 0xf6, 0xf6, 0xd6, 0xe9, 0x26, 0xbf, 0x0e, 0xaa, 0xbf,
	0x41, 0xe5, 0xc0, 0xeb, 0xdf, 0x27, 0xc1, 0xb9, 0xb6, 0xa4, 0xf0, 0x8d, 0x03, 0xaa, 0xb6, 0xe0,
	0x05, 0x65, 0xc6, 0xf6, 0xe0, 0xb8, 0x1b, 0xe3, 0xe9, 0x8b, 0x8f, 0x77, 0xe3, 0xf0, 0xe3, 0xd7,
	0xa3, 0x89, 0x05, 0xbf, 0x81, 0x4a, 0xff, 0x6a, 0x94, 0xc7, 0x01, 0xbe, 0x73, 0x40, 0xdd, 0x9e,
	0xc7, 0xbb, 0x16, 0x7b, 0xeb, 0x84, 0xbb, 0x39, 0xee, 0x44, 0x81, 0xbc, 0x92, 0x21, 0x2f, 0xfa,
	0x0b, 0x16, 0xe4, 0x7e, 0xb1, 0x01, 0xbe, 0x76, 0xc0, 0x95, 0xf2, 0xa8, 0xde, 0xb1, 0xda, 0x97,
	0xa8, 0xdd, 0xfb, 0xe3, 0xa8, 0x0b, 0xd0, 0xe5, 0x0c, 0xb4, 0xe1, 0x5f, 0xb3, 0x82, 0x8e, 0xa6,
	0xe1, 0x0b, 0x70, 0xe1, 0x97, 0xec, 0x2e, 0xda, 0xcc, 0x7e, 0x12, 0xb9, 0xb7, 0xff, 0x41, 0x94,
	0x83, 0xb4, 0x1e, 0x1f, 0x0f, 0x3c, 0xe7, 0x64, 0xe0, 0x39, 0x5f, 0x06, 0x9e, 0xf3, 0x6a, 0xe8,
	0x55, 0x4e, 0x86, 0x5e, 0xe5, 0xd3, 0xd0, 0xab, 0x3c, 0x7f, 0x40, 0x99, 0xda, 0xed, 0x77, 0x83,
	0x50, 0xc4, 0x39, 0xa4, 0xd8, 0xd9, 0x61, 0x21, 0xc3, 0x3d, 0x44, 0xc5, 0x6a, 0xce, 0xbd, 0x5f,
	0x90, 0xab, 0x83, 0x84, 0xc8, 0xee, 0x54, 0x76, 0x77, 0xde, 0xfb, 0x11, 0x00, 0x00, 0xff, 0xff,
	0x26, 0x4c, 0xd8, 0xb9, 0x0b, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterCadanceContract defines the endpoint for
	// registering a new cadance contract .
	RegisterCadanceContract(ctx context.Context, in *MsgRegisterCadanceContract, opts ...grpc.CallOption) (*MsgRegisterCadanceContractResponse, error)
	// UnregisterCadanceContract defines the endpoint for
	// unregistering a cadance contract .
	UnregisterCadanceContract(ctx context.Context, in *MsgUnregisterCadanceContract, opts ...grpc.CallOption) (*MsgUnregisterCadanceContractResponse, error)
	// UnjailCadanceContract defines the endpoint for
	// unjailing a cadance contract .
	UnjailCadanceContract(ctx context.Context, in *MsgUnjailCadanceContract, opts ...grpc.CallOption) (*MsgUnjailCadanceContractResponse, error)
	// UpdateParams defines a governance operation for updating the x/cadance module
	// parameters. The authority is hard-coded to the x/gov module account.
	//
	// Since: cosmos-sdk 0.47
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterCadanceContract(ctx context.Context, in *MsgRegisterCadanceContract, opts ...grpc.CallOption) (*MsgRegisterCadanceContractResponse, error) {
	out := new(MsgRegisterCadanceContractResponse)
	err := c.cc.Invoke(ctx, "/bitsong.cadance.v1.Msg/RegisterCadanceContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnregisterCadanceContract(ctx context.Context, in *MsgUnregisterCadanceContract, opts ...grpc.CallOption) (*MsgUnregisterCadanceContractResponse, error) {
	out := new(MsgUnregisterCadanceContractResponse)
	err := c.cc.Invoke(ctx, "/bitsong.cadance.v1.Msg/UnregisterCadanceContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnjailCadanceContract(ctx context.Context, in *MsgUnjailCadanceContract, opts ...grpc.CallOption) (*MsgUnjailCadanceContractResponse, error) {
	out := new(MsgUnjailCadanceContractResponse)
	err := c.cc.Invoke(ctx, "/bitsong.cadance.v1.Msg/UnjailCadanceContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/bitsong.cadance.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterCadanceContract defines the endpoint for
	// registering a new cadance contract .
	RegisterCadanceContract(context.Context, *MsgRegisterCadanceContract) (*MsgRegisterCadanceContractResponse, error)
	// UnregisterCadanceContract defines the endpoint for
	// unregistering a cadance contract .
	UnregisterCadanceContract(context.Context, *MsgUnregisterCadanceContract) (*MsgUnregisterCadanceContractResponse, error)
	// UnjailCadanceContract defines the endpoint for
	// unjailing a cadance contract .
	UnjailCadanceContract(context.Context, *MsgUnjailCadanceContract) (*MsgUnjailCadanceContractResponse, error)
	// UpdateParams defines a governance operation for updating the x/cadance module
	// parameters. The authority is hard-coded to the x/gov module account.
	//
	// Since: cosmos-sdk 0.47
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterCadanceContract(ctx context.Context, req *MsgRegisterCadanceContract) (*MsgRegisterCadanceContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCadanceContract not implemented")
}
func (*UnimplementedMsgServer) UnregisterCadanceContract(ctx context.Context, req *MsgUnregisterCadanceContract) (*MsgUnregisterCadanceContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterCadanceContract not implemented")
}
func (*UnimplementedMsgServer) UnjailCadanceContract(ctx context.Context, req *MsgUnjailCadanceContract) (*MsgUnjailCadanceContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnjailCadanceContract not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterCadanceContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterCadanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterCadanceContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.cadance.v1.Msg/RegisterCadanceContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterCadanceContract(ctx, req.(*MsgRegisterCadanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnregisterCadanceContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnregisterCadanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnregisterCadanceContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.cadance.v1.Msg/UnregisterCadanceContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnregisterCadanceContract(ctx, req.(*MsgUnregisterCadanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnjailCadanceContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnjailCadanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnjailCadanceContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.cadance.v1.Msg/UnjailCadanceContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnjailCadanceContract(ctx, req.(*MsgUnjailCadanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.cadance.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bitsong.cadance.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCadanceContract",
			Handler:    _Msg_RegisterCadanceContract_Handler,
		},
		{
			MethodName: "UnregisterCadanceContract",
			Handler:    _Msg_UnregisterCadanceContract_Handler,
		},
		{
			MethodName: "UnjailCadanceContract",
			Handler:    _Msg_UnjailCadanceContract_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bitsong/cadance/v1/tx.proto",
}

func (m *MsgRegisterCadanceContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterCadanceContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterCadanceContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterCadanceContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterCadanceContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterCadanceContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnregisterCadanceContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnregisterCadanceContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnregisterCadanceContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnregisterCadanceContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnregisterCadanceContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnregisterCadanceContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnjailCadanceContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnjailCadanceContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnjailCadanceContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnjailCadanceContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnjailCadanceContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnjailCadanceContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterCadanceContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterCadanceContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnregisterCadanceContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnregisterCadanceContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnjailCadanceContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnjailCadanceContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterCadanceContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterCadanceContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterCadanceContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterCadanceContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterCadanceContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterCadanceContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnregisterCadanceContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnregisterCadanceContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnregisterCadanceContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnregisterCadanceContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnregisterCadanceContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnregisterCadanceContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnjailCadanceContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnjailCadanceContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnjailCadanceContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnjailCadanceContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnjailCadanceContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnjailCadanceContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
