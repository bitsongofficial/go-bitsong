// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bitsong/cadence/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterCadenceContract is the Msg/RegisterCadenceContract request type.
type MsgRegisterCadenceContract struct {
	// The address of the sender.
	SenderAddress string `protobuf:"bytes,1,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	// The address of the contract to register.
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *MsgRegisterCadenceContract) Reset()         { *m = MsgRegisterCadenceContract{} }
func (m *MsgRegisterCadenceContract) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterCadenceContract) ProtoMessage()    {}
func (*MsgRegisterCadenceContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_50647315fd237ecd, []int{0}
}
func (m *MsgRegisterCadenceContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterCadenceContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterCadenceContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterCadenceContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterCadenceContract.Merge(m, src)
}
func (m *MsgRegisterCadenceContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterCadenceContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterCadenceContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterCadenceContract proto.InternalMessageInfo

func (m *MsgRegisterCadenceContract) GetSenderAddress() string {
	if m != nil {
		return m.SenderAddress
	}
	return ""
}

func (m *MsgRegisterCadenceContract) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

// MsgRegisterCadenceContractResponse defines the response structure for executing a
// MsgRegisterCadenceContract message.
type MsgRegisterCadenceContractResponse struct {
}

func (m *MsgRegisterCadenceContractResponse) Reset()         { *m = MsgRegisterCadenceContractResponse{} }
func (m *MsgRegisterCadenceContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterCadenceContractResponse) ProtoMessage()    {}
func (*MsgRegisterCadenceContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_50647315fd237ecd, []int{1}
}
func (m *MsgRegisterCadenceContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterCadenceContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterCadenceContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterCadenceContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterCadenceContractResponse.Merge(m, src)
}
func (m *MsgRegisterCadenceContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterCadenceContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterCadenceContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterCadenceContractResponse proto.InternalMessageInfo

// MsgUnregisterCadenceContract is the Msg/UnregisterCadenceContract request type.
type MsgUnregisterCadenceContract struct {
	// The address of the sender.
	SenderAddress string `protobuf:"bytes,1,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	// The address of the contract to unregister.
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *MsgUnregisterCadenceContract) Reset()         { *m = MsgUnregisterCadenceContract{} }
func (m *MsgUnregisterCadenceContract) String() string { return proto.CompactTextString(m) }
func (*MsgUnregisterCadenceContract) ProtoMessage()    {}
func (*MsgUnregisterCadenceContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_50647315fd237ecd, []int{2}
}
func (m *MsgUnregisterCadenceContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnregisterCadenceContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnregisterCadenceContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnregisterCadenceContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnregisterCadenceContract.Merge(m, src)
}
func (m *MsgUnregisterCadenceContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnregisterCadenceContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnregisterCadenceContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnregisterCadenceContract proto.InternalMessageInfo

func (m *MsgUnregisterCadenceContract) GetSenderAddress() string {
	if m != nil {
		return m.SenderAddress
	}
	return ""
}

func (m *MsgUnregisterCadenceContract) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

// MsgUnregisterCadenceContractResponse defines the response structure for executing a
// MsgUnregisterCadenceContract message.
type MsgUnregisterCadenceContractResponse struct {
}

func (m *MsgUnregisterCadenceContractResponse) Reset()         { *m = MsgUnregisterCadenceContractResponse{} }
func (m *MsgUnregisterCadenceContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnregisterCadenceContractResponse) ProtoMessage()    {}
func (*MsgUnregisterCadenceContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_50647315fd237ecd, []int{3}
}
func (m *MsgUnregisterCadenceContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnregisterCadenceContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnregisterCadenceContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnregisterCadenceContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnregisterCadenceContractResponse.Merge(m, src)
}
func (m *MsgUnregisterCadenceContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnregisterCadenceContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnregisterCadenceContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnregisterCadenceContractResponse proto.InternalMessageInfo

// MsgUnjailCadenceContract is the Msg/UnjailCadenceContract request type.
type MsgUnjailCadenceContract struct {
	// The address of the sender.
	SenderAddress string `protobuf:"bytes,1,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	// The address of the contract to unjail.
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *MsgUnjailCadenceContract) Reset()         { *m = MsgUnjailCadenceContract{} }
func (m *MsgUnjailCadenceContract) String() string { return proto.CompactTextString(m) }
func (*MsgUnjailCadenceContract) ProtoMessage()    {}
func (*MsgUnjailCadenceContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_50647315fd237ecd, []int{4}
}
func (m *MsgUnjailCadenceContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnjailCadenceContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnjailCadenceContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnjailCadenceContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnjailCadenceContract.Merge(m, src)
}
func (m *MsgUnjailCadenceContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnjailCadenceContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnjailCadenceContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnjailCadenceContract proto.InternalMessageInfo

func (m *MsgUnjailCadenceContract) GetSenderAddress() string {
	if m != nil {
		return m.SenderAddress
	}
	return ""
}

func (m *MsgUnjailCadenceContract) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

// MsgUnjailCadenceContractResponse defines the response structure for executing a
// MsgUnjailCadenceContract message.
type MsgUnjailCadenceContractResponse struct {
}

func (m *MsgUnjailCadenceContractResponse) Reset()         { *m = MsgUnjailCadenceContractResponse{} }
func (m *MsgUnjailCadenceContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnjailCadenceContractResponse) ProtoMessage()    {}
func (*MsgUnjailCadenceContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_50647315fd237ecd, []int{5}
}
func (m *MsgUnjailCadenceContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnjailCadenceContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnjailCadenceContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnjailCadenceContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnjailCadenceContractResponse.Merge(m, src)
}
func (m *MsgUnjailCadenceContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnjailCadenceContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnjailCadenceContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnjailCadenceContractResponse proto.InternalMessageInfo

// MsgUpdateParams is the Msg/UpdateParams request type.
//
// Since: cosmos-sdk 0.47
type MsgUpdateParams struct {
	// authority is the address of the governance account.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the x/cadence parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_50647315fd237ecd, []int{6}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
//
// Since: cosmos-sdk 0.47
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_50647315fd237ecd, []int{7}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterCadenceContract)(nil), "bitsong.cadence.v1.MsgRegisterCadenceContract")
	proto.RegisterType((*MsgRegisterCadenceContractResponse)(nil), "bitsong.cadence.v1.MsgRegisterCadenceContractResponse")
	proto.RegisterType((*MsgUnregisterCadenceContract)(nil), "bitsong.cadence.v1.MsgUnregisterCadenceContract")
	proto.RegisterType((*MsgUnregisterCadenceContractResponse)(nil), "bitsong.cadence.v1.MsgUnregisterCadenceContractResponse")
	proto.RegisterType((*MsgUnjailCadenceContract)(nil), "bitsong.cadence.v1.MsgUnjailCadenceContract")
	proto.RegisterType((*MsgUnjailCadenceContractResponse)(nil), "bitsong.cadence.v1.MsgUnjailCadenceContractResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "bitsong.cadence.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "bitsong.cadence.v1.MsgUpdateParamsResponse")
}

func init() { proto.RegisterFile("bitsong/cadence/v1/tx.proto", fileDescriptor_50647315fd237ecd) }

var fileDescriptor_50647315fd237ecd = []byte{
	// 561 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0x4f, 0x4f, 0xd4, 0x40,
	0x18, 0xc6, 0xb7, 0x88, 0x24, 0x8c, 0x0a, 0x3a, 0xc1, 0xec, 0x6e, 0xc5, 0xee, 0x52, 0x40, 0x05,
	0xa5, 0x23, 0xa8, 0x84, 0x78, 0x73, 0x39, 0x6f, 0x34, 0x6b, 0xbc, 0x78, 0xc1, 0xd9, 0xee, 0x30,
	0x8c, 0xd9, 0xce, 0x34, 0x9d, 0x59, 0x02, 0x37, 0xc3, 0x27, 0x30, 0xe1, 0x1b, 0x78, 0xf4, 0x44,
	0x8c, 0x1f, 0x82, 0x23, 0xd1, 0x8b, 0x27, 0x63, 0x76, 0x4d, 0xf8, 0x04, 0xde, 0xcd, 0x76, 0xa6,
	0xc5, 0x3f, 0x1d, 0xe3, 0x1e, 0xf4, 0xd2, 0x4c, 0xdf, 0xf7, 0x79, 0xdf, 0xe7, 0xd7, 0xe6, 0x69,
	0xc1, 0xb5, 0x36, 0x53, 0x52, 0x70, 0x8a, 0x42, 0xdc, 0x21, 0x3c, 0x24, 0x68, 0x77, 0x15, 0xa9,
	0xbd, 0x20, 0x4e, 0x84, 0x12, 0x10, 0x9a, 0x66, 0x60, 0x9a, 0xc1, 0xee, 0xaa, 0x3b, 0x4b, 0x85,
	0xa0, 0x5d, 0x82, 0x70, 0xcc, 0x10, 0xe6, 0x5c, 0x28, 0xac, 0x98, 0xe0, 0x52, 0x4f, 0xb8, 0xe5,
	0x50, 0xc8, 0x48, 0x48, 0x14, 0x49, 0x3a, 0xdc, 0x14, 0x49, 0x6a, 0x1a, 0xf5, 0x02, 0x1f, 0x4a,
	0x38, 0x91, 0x2c, 0x1b, 0x9d, 0xa1, 0x82, 0x8a, 0xf4, 0x88, 0x86, 0x27, 0x53, 0xad, 0xea, 0x85,
	0x5b, 0xba, 0xa1, 0x6f, 0x4c, 0xeb, 0x0a, 0x8e, 0x18, 0x17, 0x28, 0xbd, 0xea, 0x92, 0xcf, 0x81,
	0xdb, 0x94, 0xb4, 0x45, 0x28, 0x93, 0x8a, 0x24, 0x9b, 0xda, 0x6a, 0x53, 0x70, 0x95, 0xe0, 0x50,
	0xc1, 0x45, 0x30, 0x25, 0x09, 0xef, 0x90, 0x64, 0x0b, 0x77, 0x3a, 0x09, 0x91, 0xb2, 0xe2, 0xd4,
	0x9d, 0x5b, 0x93, 0xad, 0x4b, 0xba, 0xfa, 0x48, 0x17, 0xe1, 0x12, 0xb8, 0x1c, 0x9a, 0x91, 0x5c,
	0x38, 0x96, 0x0a, 0xa7, 0xb3, 0xba, 0x91, 0xfa, 0x0b, 0xc0, 0xb7, 0xfb, 0xb5, 0x88, 0x8c, 0x05,
	0x97, 0xc4, 0x8f, 0xc1, 0x6c, 0x53, 0xd2, 0x67, 0x3c, 0xf9, 0x6f, 0x5c, 0x37, 0xc0, 0xc2, 0x9f,
	0x1c, 0x73, 0xb2, 0x2e, 0xa8, 0xa4, 0xba, 0x97, 0x98, 0x75, 0xff, 0x3d, 0x95, 0x0f, 0xea, 0x36,
	0xb7, 0x9c, 0xe8, 0xd0, 0x01, 0xd3, 0x43, 0x51, 0xdc, 0xc1, 0x8a, 0x3c, 0xc1, 0x09, 0x8e, 0x24,
	0x5c, 0x07, 0x93, 0xb8, 0xa7, 0x76, 0x44, 0xc2, 0xd4, 0xbe, 0x86, 0x68, 0x54, 0x3e, 0xbc, 0x5f,
	0x99, 0x31, 0x69, 0x30, 0xeb, 0x9f, 0xaa, 0x84, 0x71, 0xda, 0x3a, 0x93, 0xc2, 0x0d, 0x30, 0x11,
	0xa7, 0x1b, 0x52, 0xa0, 0x0b, 0x6b, 0x6e, 0xf0, 0x7b, 0x9e, 0x03, 0xed, 0xd1, 0x18, 0x3f, 0xfe,
	0x5c, 0x2b, 0xb5, 0x8c, 0xfe, 0xe1, 0xd4, 0xc1, 0xe9, 0xd1, 0xf2, 0xd9, 0x26, 0xbf, 0x0a, 0xca,
	0xbf, 0x40, 0x65, 0xc0, 0x6b, 0xdf, 0xc6, 0xc1, 0xb9, 0xa6, 0xa4, 0xf0, 0xad, 0x03, 0xca, 0xb6,
	0xe0, 0x05, 0x45, 0xc6, 0xf6, 0xe0, 0xb8, 0xeb, 0xa3, 0xe9, 0xf3, 0x97, 0x77, 0xf3, 0xe0, 0xe3,
	0xd7, 0xc3, 0xb1, 0x39, 0xbf, 0x86, 0x0a, 0xbf, 0x6a, 0x94, 0xc5, 0x01, 0xbe, 0x73, 0x40, 0xd5,
	0x9e, 0xc7, 0xbb, 0x16, 0x7b, 0xeb, 0x84, 0xbb, 0x31, 0xea, 0x44, 0x8e, 0xbc, 0x94, 0x22, 0xcf,
	0xfb, 0x73, 0x16, 0xe4, 0x5e, 0xbe, 0x01, 0xbe, 0x71, 0xc0, 0xd5, 0xe2, 0xa8, 0xde, 0xb1, 0xda,
	0x17, 0xa8, 0xdd, 0xfb, 0xa3, 0xa8, 0x73, 0xd0, 0xc5, 0x14, 0xb4, 0xe6, 0x5f, 0xb7, 0x82, 0x0e,
	0xa7, 0xe1, 0x0b, 0x70, 0xf1, 0xa7, 0xec, 0xce, 0xdb, 0xcc, 0x7e, 0x10, 0xb9, 0xb7, 0xff, 0x42,
	0x94, 0x81, 0xb8, 0xe7, 0x5f, 0x9d, 0x1e, 0x2d, 0x3b, 0x8d, 0xc7, 0xc7, 0x7d, 0xcf, 0x39, 0xe9,
	0x7b, 0xce, 0x97, 0xbe, 0xe7, 0xbc, 0x1e, 0x78, 0xa5, 0x93, 0x81, 0x57, 0xfa, 0x34, 0xf0, 0x4a,
	0xcf, 0x1f, 0x50, 0xa6, 0x76, 0x7a, 0xed, 0x20, 0x14, 0x51, 0xc6, 0x2a, 0xb6, 0xb7, 0x59, 0xc8,
	0x70, 0x17, 0x51, 0xb1, 0x92, 0xe1, 0xef, 0xe5, 0x0f, 0xa0, 0xf6, 0x63, 0x22, 0xdb, 0x13, 0xe9,
	0x2f, 0xf4, 0xde, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9b, 0xb2, 0x6a, 0xe4, 0x12, 0x06, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterCadenceContract defines the endpoint for
	// registering a new cadence contract .
	RegisterCadenceContract(ctx context.Context, in *MsgRegisterCadenceContract, opts ...grpc.CallOption) (*MsgRegisterCadenceContractResponse, error)
	// UnregisterCadenceContract defines the endpoint for
	// unregistering a cadence contract .
	UnregisterCadenceContract(ctx context.Context, in *MsgUnregisterCadenceContract, opts ...grpc.CallOption) (*MsgUnregisterCadenceContractResponse, error)
	// UnjailCadenceContract defines the endpoint for
	// unjailing a cadence contract .
	UnjailCadenceContract(ctx context.Context, in *MsgUnjailCadenceContract, opts ...grpc.CallOption) (*MsgUnjailCadenceContractResponse, error)
	// UpdateParams defines a governance operation for updating the x/cadence module
	// parameters. The authority is hard-coded to the x/gov module account.
	//
	// Since: cosmos-sdk 0.47
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterCadenceContract(ctx context.Context, in *MsgRegisterCadenceContract, opts ...grpc.CallOption) (*MsgRegisterCadenceContractResponse, error) {
	out := new(MsgRegisterCadenceContractResponse)
	err := c.cc.Invoke(ctx, "/bitsong.cadence.v1.Msg/RegisterCadenceContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnregisterCadenceContract(ctx context.Context, in *MsgUnregisterCadenceContract, opts ...grpc.CallOption) (*MsgUnregisterCadenceContractResponse, error) {
	out := new(MsgUnregisterCadenceContractResponse)
	err := c.cc.Invoke(ctx, "/bitsong.cadence.v1.Msg/UnregisterCadenceContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnjailCadenceContract(ctx context.Context, in *MsgUnjailCadenceContract, opts ...grpc.CallOption) (*MsgUnjailCadenceContractResponse, error) {
	out := new(MsgUnjailCadenceContractResponse)
	err := c.cc.Invoke(ctx, "/bitsong.cadence.v1.Msg/UnjailCadenceContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/bitsong.cadence.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterCadenceContract defines the endpoint for
	// registering a new cadence contract .
	RegisterCadenceContract(context.Context, *MsgRegisterCadenceContract) (*MsgRegisterCadenceContractResponse, error)
	// UnregisterCadenceContract defines the endpoint for
	// unregistering a cadence contract .
	UnregisterCadenceContract(context.Context, *MsgUnregisterCadenceContract) (*MsgUnregisterCadenceContractResponse, error)
	// UnjailCadenceContract defines the endpoint for
	// unjailing a cadence contract .
	UnjailCadenceContract(context.Context, *MsgUnjailCadenceContract) (*MsgUnjailCadenceContractResponse, error)
	// UpdateParams defines a governance operation for updating the x/cadence module
	// parameters. The authority is hard-coded to the x/gov module account.
	//
	// Since: cosmos-sdk 0.47
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterCadenceContract(ctx context.Context, req *MsgRegisterCadenceContract) (*MsgRegisterCadenceContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCadenceContract not implemented")
}
func (*UnimplementedMsgServer) UnregisterCadenceContract(ctx context.Context, req *MsgUnregisterCadenceContract) (*MsgUnregisterCadenceContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterCadenceContract not implemented")
}
func (*UnimplementedMsgServer) UnjailCadenceContract(ctx context.Context, req *MsgUnjailCadenceContract) (*MsgUnjailCadenceContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnjailCadenceContract not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterCadenceContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterCadenceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterCadenceContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.cadence.v1.Msg/RegisterCadenceContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterCadenceContract(ctx, req.(*MsgRegisterCadenceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnregisterCadenceContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnregisterCadenceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnregisterCadenceContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.cadence.v1.Msg/UnregisterCadenceContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnregisterCadenceContract(ctx, req.(*MsgUnregisterCadenceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnjailCadenceContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnjailCadenceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnjailCadenceContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.cadence.v1.Msg/UnjailCadenceContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnjailCadenceContract(ctx, req.(*MsgUnjailCadenceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.cadence.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bitsong.cadence.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCadenceContract",
			Handler:    _Msg_RegisterCadenceContract_Handler,
		},
		{
			MethodName: "UnregisterCadenceContract",
			Handler:    _Msg_UnregisterCadenceContract_Handler,
		},
		{
			MethodName: "UnjailCadenceContract",
			Handler:    _Msg_UnjailCadenceContract_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bitsong/cadence/v1/tx.proto",
}

func (m *MsgRegisterCadenceContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterCadenceContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterCadenceContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterCadenceContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterCadenceContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterCadenceContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnregisterCadenceContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnregisterCadenceContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnregisterCadenceContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnregisterCadenceContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnregisterCadenceContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnregisterCadenceContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnjailCadenceContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnjailCadenceContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnjailCadenceContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnjailCadenceContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnjailCadenceContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnjailCadenceContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterCadenceContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterCadenceContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnregisterCadenceContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnregisterCadenceContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnjailCadenceContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnjailCadenceContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterCadenceContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterCadenceContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterCadenceContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterCadenceContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterCadenceContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterCadenceContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnregisterCadenceContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnregisterCadenceContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnregisterCadenceContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnregisterCadenceContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnregisterCadenceContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnregisterCadenceContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnjailCadenceContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnjailCadenceContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnjailCadenceContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnjailCadenceContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnjailCadenceContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnjailCadenceContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
